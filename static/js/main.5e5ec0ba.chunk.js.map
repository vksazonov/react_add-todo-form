{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","userId","usersFromServer","find","App","useState","setTitle","setSelectedUserId","visibleTodos","setTodo","isEmptyTitle","isEmptyTitleCheck","isUserSelected","isUserSelectedCheck","newId","Math","max","action","method","onSubmit","event","preventDefault","selectedUser","person","newTodo","state","type","value","placeholder","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e5ec0ba.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { FC } from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo:FC<Props> = ({ user }) => {\n  const {\n    email,\n    name,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo:FC<Props> = ({ todo }) => {\n  const {\n    title,\n    completed,\n    user,\n    id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo', { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n      { user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList:FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import { FC, useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App:FC = () => {\n  const [title, setTitle] = useState('');\n  const [userId, setSelectedUserId] = useState(0);\n  const [visibleTodos, setTodo] = useState(todos);\n  const [isEmptyTitle, isEmptyTitleCheck] = useState(true);\n  const [isUserSelected, isUserSelectedCheck] = useState(true);\n\n  const newId = Math.max(...visibleTodos.map(todo => todo.id));\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          if (!title) {\n            isEmptyTitleCheck(false);\n          }\n\n          if (!userId) {\n            isUserSelectedCheck(false);\n          }\n\n          if (title && userId) {\n            const selectedUser = usersFromServer\n              .find(person => person.id === userId) || null;\n\n            const newTodo: Todo = {\n              id: newId + 1,\n              title,\n              completed: false,\n              userId: selectedUser?.id || null,\n              user: selectedUser,\n            };\n\n            setTodo((state) => ([...state, newTodo]));\n            setTitle('');\n            setSelectedUserId(0);\n          }\n        }}\n      >\n        <div className=\"field\">\n          <label>\n            <span>Title: </span>\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              value={title}\n              placeholder=\"Enter a title\"\n              onChange={(event) => {\n                setTitle(event.target.value);\n                isEmptyTitleCheck(true);\n              }}\n            />\n          </label>\n          {!isEmptyTitle && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n\n        </div>\n\n        <div className=\"field\">\n          <label>\n            <span>User: </span>\n            <select\n              data-cy=\"userSelect\"\n              value={userId}\n              onChange={(event) => {\n                setSelectedUserId(+event.target.value);\n                isUserSelectedCheck(true);\n              }}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n\n              {usersFromServer.map(person => (\n                <option value={person.id} key={person.id}>{person.name}</option>\n              ))}\n            </select>\n          </label>\n          {!isUserSelected && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={visibleTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}